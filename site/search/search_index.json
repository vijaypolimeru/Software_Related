{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Caution This website will be under development forever, as this website is more like a placeholder. Once certain content of the website is fully matured, it will be moved to a saperate website. Everything you find in this website is open to copy/use/sell, do whatever you want. I will be glad, if you find something usefull in this website. About Me I am Vijay Kumar. At present, I am working as a research scholar in department of Civil Engineering, IIT Bombay. My research involves predicting the failure characteristics of shear critical thin walled structures (such as Hollow RC bridge columns, shear walls, box girders etc.) under reversed cyclic and earthquake loads. My research interests includes Finite element analysis, Mechanics of Reinforced Concrete and Structural dynamics. Education Ph. D , Structural Engineering, IIT Bombay , India, 2015 - Ongoing M.Tech , Structural Engineering, NIT Rourkela , India, 2013 - 2015 B. Tech , Civil Engineering, KL College of Engineering (affiliated to Acharya Nagarjuna University), India, 2008 - 2012","title":"About Me"},{"location":"#about-me","text":"I am Vijay Kumar. At present, I am working as a research scholar in department of Civil Engineering, IIT Bombay. My research involves predicting the failure characteristics of shear critical thin walled structures (such as Hollow RC bridge columns, shear walls, box girders etc.) under reversed cyclic and earthquake loads. My research interests includes Finite element analysis, Mechanics of Reinforced Concrete and Structural dynamics. Education Ph. D , Structural Engineering, IIT Bombay , India, 2015 - Ongoing M.Tech , Structural Engineering, NIT Rourkela , India, 2013 - 2015 B. Tech , Civil Engineering, KL College of Engineering (affiliated to Acharya Nagarjuna University), India, 2008 - 2012","title":"About Me"},{"location":"Cont_Mech/Cont_Mech/","text":"Continuum Mechanics","title":"Continuum Mechanics"},{"location":"Cont_Mech/Cont_Mech/#continuum-mechanics","text":"","title":"Continuum Mechanics"},{"location":"Machine_Learning/Introduction/","text":"Introduction","title":"Introduction"},{"location":"Machine_Learning/Introduction/#introduction","text":"","title":"Introduction"},{"location":"Machine_Learning/Supervised_ML/","text":"Supervised Machine Learning","title":"Supervised ML"},{"location":"Machine_Learning/Supervised_ML/#supervised-machine-learning","text":"","title":"Supervised Machine Learning"},{"location":"Machine_Learning/Unsupervised_ML/","text":"Unsupervised Machine Learning","title":"Unsupervised ML"},{"location":"Machine_Learning/Unsupervised_ML/#unsupervised-machine-learning","text":"","title":"Unsupervised Machine Learning"},{"location":"Misc/Git_Rel/","text":"Git Related... Ignoring Files That Have Already Been Committed to the Rrepo Git can only ignore files that are untracked - files that haven't been committed to the repository, yet. That's why, when you create a new repository, you should also create a .gitignore file with all the file patterns you want to ignore. However its very difficult to know upfornt about all the file types that you want to be ignored. Before cleaning the git repository, Just commit all the outstanding changes Edit .gitignore file, so that it represents the latest set of file tyes that needs to be ignored. Cleaning the Repo Following are the three steps to clean up your repository and make sure ignored items are indeed ignored $ git rm -r --cached . $ git add . $ git commit -m \"Clean up ignored files\"","title":"Git Related"},{"location":"Misc/Git_Rel/#git-related","text":"","title":"Git Related..."},{"location":"Misc/Git_Rel/#ignoring-files-that-have-already-been-committed-to-the-rrepo","text":"Git can only ignore files that are untracked - files that haven't been committed to the repository, yet. That's why, when you create a new repository, you should also create a .gitignore file with all the file patterns you want to ignore. However its very difficult to know upfornt about all the file types that you want to be ignored. Before cleaning the git repository, Just commit all the outstanding changes Edit .gitignore file, so that it represents the latest set of file tyes that needs to be ignored. Cleaning the Repo Following are the three steps to clean up your repository and make sure ignored items are indeed ignored $ git rm -r --cached . $ git add . $ git commit -m \"Clean up ignored files\"","title":"Ignoring Files That Have Already Been Committed to the Rrepo"},{"location":"Misc/Misc/","text":"Really Miscellaneous Info... Unit Weight of Concrete Mass Density of Plain Concrete ( kg/m^3 kg/m^3 ) = 2300 kg/m^3 kg/m^3 Weight Density of Plain Concrete ( kN/m^3 kN/m^3 ) = 23 kN/m^3 kN/m^3 Mass Density of Reinforced Concrete ( kg/m^3 kg/m^3 ) = 2500 kg/m^3 kg/m^3 Weight Density of Reinforced Concrete ( kN/m^3 kN/m^3 ) = 25 kN/m^3 kN/m^3 Mass Density of Steel Rebar ( kg/m^3 kg/m^3 ) = 7850 kg/m^3 kg/m^3 Weight Density of Steel Rebar ( kN/m^3 kN/m^3 ) = 78.5 kN/m^3 kN/m^3 Acceleartion Due to gravity In m/s^2 m/s^2 = 9.8067 m/s^2 m/s^2 In ft/s^2 ft/s^2 = 32.1740 ft/s^2 ft/s^2 In in/s^2 in/s^2 = 386.40 in/s^2 in/s^2 (i.e. 12*32.1740 in/s^2 in/s^2 )","title":"Really Misc"},{"location":"Misc/Misc/#really-miscellaneous-info","text":"","title":"Really Miscellaneous Info..."},{"location":"Misc/Misc/#unit-weight-of-concrete","text":"Mass Density of Plain Concrete ( kg/m^3 kg/m^3 ) = 2300 kg/m^3 kg/m^3 Weight Density of Plain Concrete ( kN/m^3 kN/m^3 ) = 23 kN/m^3 kN/m^3 Mass Density of Reinforced Concrete ( kg/m^3 kg/m^3 ) = 2500 kg/m^3 kg/m^3 Weight Density of Reinforced Concrete ( kN/m^3 kN/m^3 ) = 25 kN/m^3 kN/m^3 Mass Density of Steel Rebar ( kg/m^3 kg/m^3 ) = 7850 kg/m^3 kg/m^3 Weight Density of Steel Rebar ( kN/m^3 kN/m^3 ) = 78.5 kN/m^3 kN/m^3","title":"Unit Weight of Concrete"},{"location":"Misc/Misc/#acceleartion-due-to-gravity","text":"In m/s^2 m/s^2 = 9.8067 m/s^2 m/s^2 In ft/s^2 ft/s^2 = 32.1740 ft/s^2 ft/s^2 In in/s^2 in/s^2 = 386.40 in/s^2 in/s^2 (i.e. 12*32.1740 in/s^2 in/s^2 )","title":"Acceleartion Due to gravity"},{"location":"Misc/Practice/","text":"Practice Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. C++ Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); } Embedded code blocks Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. cpp Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); } loyees . EmployeeID = ' 087652 ' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. e=mc^2 \\tag{2}\\label{eq2} e=mc^2 \\tag{2}\\label{eq2} Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. MathJax (Trials) \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j 3 < 4 3 < 4 \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} \\ begin { align } p ( v_i = 1 | \\ mathbf { h } ) & = \\ sigma \\ left ( \\ sum_j w_ { ij } h_j + b_i \\ right ) \\\\ p ( h_j = 1 | \\ mathbf { v } ) & = \\ sigma \\ left ( \\ sum_i w_ { ij } v_i + c_j \\ right ) \\ end { align } \\begin{equation}\\begin{aligned} a &= b + c \\\\ &= d + e + f + g \\\\ &= h + i \\end{aligned}\\end{equation}\\tag{1}\\label{eq1} \\begin{equation}\\begin{aligned} a &= b + c \\\\ &= d + e + f + g \\\\ &= h + i \\end{aligned}\\end{equation}\\tag{1}\\label{eq1} From Equation. \\eqref{eq1} and Equation. \\eqref{eq2} Colons can be used to align columns. 3 dashes min to separate headers. Outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 Total $1612 Table Format \ud83d\udc40 scramble Still renders nicely with links images {.tiny} emojis \ud83c\udf54 icons cloud {.icon} footnotes[^1] use < br > for multi-line line breaks","title":"Practice"},{"location":"Misc/Practice/#practice","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Practice"},{"location":"Misc/Practice/#c","text":"Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); } Embedded code blocks Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. cpp Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); } loyees . EmployeeID = ' 087652 ' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. e=mc^2 \\tag{2}\\label{eq2} e=mc^2 \\tag{2}\\label{eq2} Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files.","title":"C++"},{"location":"Misc/Practice/#mathjax-trials","text":"\\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j 3 < 4 3 < 4 \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} \\ begin { align } p ( v_i = 1 | \\ mathbf { h } ) & = \\ sigma \\ left ( \\ sum_j w_ { ij } h_j + b_i \\ right ) \\\\ p ( h_j = 1 | \\ mathbf { v } ) & = \\ sigma \\ left ( \\ sum_i w_ { ij } v_i + c_j \\ right ) \\ end { align } \\begin{equation}\\begin{aligned} a &= b + c \\\\ &= d + e + f + g \\\\ &= h + i \\end{aligned}\\end{equation}\\tag{1}\\label{eq1} \\begin{equation}\\begin{aligned} a &= b + c \\\\ &= d + e + f + g \\\\ &= h + i \\end{aligned}\\end{equation}\\tag{1}\\label{eq1} From Equation. \\eqref{eq1} and Equation. \\eqref{eq2} Colons can be used to align columns. 3 dashes min to separate headers. Outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 Total $1612 Table Format \ud83d\udc40 scramble Still renders nicely with links images {.tiny} emojis \ud83c\udf54 icons cloud {.icon} footnotes[^1] use < br > for multi-line line breaks","title":"MathJax (Trials)"},{"location":"Misc/UBUNTU_OS_Rel/","text":"UBUNTU OS Related... UBUNTU Tips and Tricks Disable Webcam For security or any other reason, sometimes it is very it is very essectial to disable webcam. Following instructions will work in UBUNTU 18.04 Temporary option - You can disable your webcam device easily via modprobe command. Open terminal either via Ctrl + Alt + T or by searching for terminal from app launcher. When it opens, run command: sudo modprobe - r uvcvideo . The command removes the module from Linux kernel. Webcam is disabled until you reboot Ubuntu. Just start (or restart) Cheese to check it out. Permanent option - You can add a rule into configuration file, so your Ubuntu machine never starts the webcam kernel module on boot. Open terminal and run command sudo gedit / etc / modprobe . d / blacklist . conf to edit the configuration file. When the file opens, add the following two new lines and save it. Line 1 # Disable webcam and Line 2 blacklist uvcvideo . To revert the changes, simply remove the 2 lines, save the file and finally reboot.","title":"UBUNTU OS Related"},{"location":"Misc/UBUNTU_OS_Rel/#ubuntu-os-related","text":"","title":"UBUNTU OS Related..."},{"location":"Misc/UBUNTU_OS_Rel/#ubuntu-tips-and-tricks","text":"","title":"UBUNTU Tips and Tricks"},{"location":"Misc/UBUNTU_OS_Rel/#disable-webcam","text":"For security or any other reason, sometimes it is very it is very essectial to disable webcam. Following instructions will work in UBUNTU 18.04 Temporary option - You can disable your webcam device easily via modprobe command. Open terminal either via Ctrl + Alt + T or by searching for terminal from app launcher. When it opens, run command: sudo modprobe - r uvcvideo . The command removes the module from Linux kernel. Webcam is disabled until you reboot Ubuntu. Just start (or restart) Cheese to check it out. Permanent option - You can add a rule into configuration file, so your Ubuntu machine never starts the webcam kernel module on boot. Open terminal and run command sudo gedit / etc / modprobe . d / blacklist . conf to edit the configuration file. When the file opens, add the following two new lines and save it. Line 1 # Disable webcam and Line 2 blacklist uvcvideo . To revert the changes, simply remove the 2 lines, save the file and finally reboot.","title":"Disable Webcam"},{"location":"Misc/Uncategorised/","text":"Uncategorised... MkDocs Multilevel Navigation MkDocs supports only upto 2 nd level navigation. Tab spacing is not supported, use spacebar of creating spaces. The subfolder Misc is not necessary, that is created just to organise the content proeprly nav : - Home : index . md - OpenSEES ( User ): OPS_User . md - OpenSEES VC ++ : OPS_VCpp . md - OpenSEES UBUNTU : OPS_Ubuntu . md - Tcl / Tk Language : Tcl_Tk . md - C ++ Libraries and Tools : Cpp_Lib_Tools . md - Artificial Intelligence : Art_Int . md - Misc : - UBUNTU OS Related : Misc \\ UBUNTU_OS_Rel . md - Uncategorised : Misc \\ Uncategorised . md","title":"Uncategorised..."},{"location":"Misc/Uncategorised/#uncategorised","text":"","title":"Uncategorised..."},{"location":"Misc/Uncategorised/#mkdocs","text":"","title":"MkDocs"},{"location":"Misc/Uncategorised/#multilevel-navigation","text":"MkDocs supports only upto 2 nd level navigation. Tab spacing is not supported, use spacebar of creating spaces. The subfolder Misc is not necessary, that is created just to organise the content proeprly nav : - Home : index . md - OpenSEES ( User ): OPS_User . md - OpenSEES VC ++ : OPS_VCpp . md - OpenSEES UBUNTU : OPS_Ubuntu . md - Tcl / Tk Language : Tcl_Tk . md - C ++ Libraries and Tools : Cpp_Lib_Tools . md - Artificial Intelligence : Art_Int . md - Misc : - UBUNTU OS Related : Misc \\ UBUNTU_OS_Rel . md - Uncategorised : Misc \\ Uncategorised . md","title":"Multilevel Navigation"},{"location":"Misc/Windows_OS_Rel/","text":"Windows OS Related... Windows CMD Tips and Tricks Start window from Command Prompt First navigate to the folder you want to open using cd command. Once you are in the desired folder command prompt in then use start . command to open the folder.","title":"Windows OS Related"},{"location":"Misc/Windows_OS_Rel/#windows-os-related","text":"","title":"Windows OS Related..."},{"location":"Misc/Windows_OS_Rel/#windows-cmd-tips-and-tricks","text":"","title":"Windows CMD Tips and Tricks"},{"location":"Misc/Windows_OS_Rel/#start-window-from-command-prompt","text":"First navigate to the folder you want to open using cd command. Once you are in the desired folder command prompt in then use start . command to open the folder.","title":"Start window from Command Prompt"},{"location":"Research_Review/Res_review/","text":"Review of Some Interesting Research Papers in Structural Engineering","title":"Research Review"},{"location":"Research_Review/Res_review/#review-of-some-interesting-research-papers-in-structural-engineering","text":"","title":"Review of Some Interesting Research Papers in Structural Engineering"},{"location":"Rough/OPS_Ubuntu/","text":"OpenSEES UBUNTU","title":"OpenSEES UBUNTU"},{"location":"Rough/OPS_Ubuntu/#opensees-ubuntu","text":"","title":"OpenSEES UBUNTU"},{"location":"Rough/OPS_User/","text":"OpenSEES","title":"OpenSEES"},{"location":"Rough/OPS_User/#opensees","text":"","title":"OpenSEES"},{"location":"Rough/OPS_VCpp/","text":"OpenSEES (VC++)","title":"OpenSEES (VC++)"},{"location":"Rough/OPS_VCpp/#opensees-vc","text":"","title":"OpenSEES (VC++)"},{"location":"Rough/Tcl_Tk/","text":"Tcl/Tk Language","title":"Tcl/Tk Language"},{"location":"Rough/Tcl_Tk/#tcltk-language","text":"","title":"Tcl/Tk Language"},{"location":"Structural_Dynamics/Structural_Dynamics/","text":"Structural_Dynamics","title":"Structural Dynamics"},{"location":"Structural_Dynamics/Structural_Dynamics/#structural_dynamics","text":"","title":"Structural_Dynamics"},{"location":"opensees/Cpp_Lib_Tools/","text":"C++ Libraries and Tools Armadillo Variable Visualizer for Visual Studio Copy paste the following code in a file with name xx_AnyName_xx . natvis and place it in the folder C : \\ blah_blah_blah \\ Microsoft Visual Studio \\ 2017 \\ Enterprise \\ Common7 \\ Packages \\ Debugger \\ Visualizers it will automatically into the Visual Studio. This piece of code has been verified in VS 2017 and hopefully it will work in other higher versions also. source <? xml version = \"1.0\" encoding = \"utf-8\" ?> < AutoVisualizer xmlns = \"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\" > < Type Name = \"arma::Col&lt;*&gt;\" > < DisplayString > {{ Size = { n_elem } }} </ DisplayString > < Expand > < Item Name = \"[size]\" > n_elem </ Item > < ArrayItems > < Size > n_elem </ Size > < ValuePointer > mem </ ValuePointer > </ ArrayItems > </ Expand > </ Type > < Type Name = \"arma::Mat&lt;*&gt;\" > < DisplayString > {{ { n_rows } x { n_cols } = { n_elem } }} </ DisplayString > < Expand > < IndexListItems > < Size > n_cols </ Size > < ValueNode > mem + ( $ i * n_rows ),[ n_rows ] </ ValueNode > </ IndexListItems > </ Expand > </ Type > < Type Name = \"arma::subview_col&lt;*&gt;\" > < DisplayString > {{ { n_rows } }} </ DisplayString > < Expand > < ArrayItems > < Size > n_rows </ Size > < ValuePointer > colmem </ ValuePointer > </ ArrayItems > </ Expand > </ Type > </ AutoVisualizer >","title":"C++ Libraries and Tools"},{"location":"opensees/Cpp_Lib_Tools/#c-libraries-and-tools","text":"","title":"C++ Libraries and Tools"},{"location":"opensees/Cpp_Lib_Tools/#armadillo-variable-visualizer-for-visual-studio","text":"Copy paste the following code in a file with name xx_AnyName_xx . natvis and place it in the folder C : \\ blah_blah_blah \\ Microsoft Visual Studio \\ 2017 \\ Enterprise \\ Common7 \\ Packages \\ Debugger \\ Visualizers it will automatically into the Visual Studio. This piece of code has been verified in VS 2017 and hopefully it will work in other higher versions also. source <? xml version = \"1.0\" encoding = \"utf-8\" ?> < AutoVisualizer xmlns = \"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\" > < Type Name = \"arma::Col&lt;*&gt;\" > < DisplayString > {{ Size = { n_elem } }} </ DisplayString > < Expand > < Item Name = \"[size]\" > n_elem </ Item > < ArrayItems > < Size > n_elem </ Size > < ValuePointer > mem </ ValuePointer > </ ArrayItems > </ Expand > </ Type > < Type Name = \"arma::Mat&lt;*&gt;\" > < DisplayString > {{ { n_rows } x { n_cols } = { n_elem } }} </ DisplayString > < Expand > < IndexListItems > < Size > n_cols </ Size > < ValueNode > mem + ( $ i * n_rows ),[ n_rows ] </ ValueNode > </ IndexListItems > </ Expand > </ Type > < Type Name = \"arma::subview_col&lt;*&gt;\" > < DisplayString > {{ { n_rows } }} </ DisplayString > < Expand > < ArrayItems > < Size > n_rows </ Size > < ValuePointer > colmem </ ValuePointer > </ ArrayItems > </ Expand > </ Type > </ AutoVisualizer >","title":"Armadillo Variable Visualizer for Visual Studio"},{"location":"opensees/OPS_GUI/","text":"OPS_GUI","title":"OpenSEES Gui"},{"location":"opensees/OPS_GUI/#ops_gui","text":"","title":"OPS_GUI"},{"location":"opensees/OPS_Python/","text":"OpenSEESpy","title":"OpenSEES Python"},{"location":"opensees/OPS_Python/#openseespy","text":"","title":"OpenSEESpy"},{"location":"opensees/OPS_Ubuntu/","text":"OpenSEES UBUNTU","title":"OpenSEES UBUNTU"},{"location":"opensees/OPS_Ubuntu/#opensees-ubuntu","text":"","title":"OpenSEES UBUNTU"},{"location":"opensees/OPS_VCpp/","text":"OpenSEES (VC++)","title":"OpenSEES VC++"},{"location":"opensees/OPS_VCpp/#opensees-vc","text":"","title":"OpenSEES (VC++)"},{"location":"opensees/Python_Lang/","text":"Python Language Related","title":"Python"},{"location":"opensees/Python_Lang/#python-language-related","text":"","title":"Python Language Related"},{"location":"opensees/Tcl_Tk/","text":"Tcl/Tk Language Useful Codes Loading file and saving its contents in a variable File with single vector of values set filename \"Abc_123_Cde.out\" ; # Keep this file in the folder or if it is elsewhere provide location (set filename \"C:\\badfba\\asdf\\Abc_123_Cde.out\";) set File_ID [ open $filename r ]; #Load the File (Abc_123_Cde.out) and read the values i set Variable_1 [ read $File_ID ] close $File_ID Example , using the above varaible Variable_1 in a foreach loop foreach counter $Variable_1 { set Temp_Var $counter puts \"Print the value of Temp_Var = $Temp_Var\" } The use the vector Variable_1 like anyother vector in tcl File with Multiple vectors of values set filename \"Abc_123_Cde.out\" ; # Keep this file in the folder or if it is elsewhere provide location (set filename \"C:\\badfba\\asdf\\Abc_123_Cde.out\";) set File_ID [ open $filename r ]; #Load the File (Abc_123_Cde.out) and read the values i for {set i 1 } { $i < 100 } { incr i 1 } { # Say, 100 lines are there in the files with 5 Columns of equal Lengths gets $File_ID line scan $line \"%i %i %i %f %f\" Data_1 ( $i ) Data_2 ( $i ) Data_3 ( $i ) Data_4 ( $i ) Data_5 ( $i ) ; # Data_1,2,3,4 and 5 are vectors of equal length } That's it, we have loaded a file and stored its contents in different vectors. Now you can used the vectors like anyother vector in the program. foreach i $ Data_1 { puts \"Data_1($i) \\t Data_2($i) \\t Data_3($i) \\t Data_4($i) \\t Data_5($i)\" } Link , For more information on Tcl - File I/O, Useful Commands/Syntaxes If...else if ... else , syntax in Tcl language is \u2212 ( for more info ) if { boolean_expression 1 } { # Executes when the boolean expression 1 is true } elseif { boolean_expression 2 } { # Executes when the boolean expression 2 is true } elseif { boolean_expression 3 } { # Executes when the boolean expression 3 is true } else { # executes when the none of the above condition is true } Example set Time_Step 0.005 ; set set ok [ analyze 1 $Time_Step ] if { $ok == 0 } { puts \"i = $i \\t Time_Step = $Time_Step -----------------------------\" } elseif { $ok < 0 } { puts \"i = $i \\t OK value = $ok -----------------------------\" } else { break; # It breaks a for loop } If the Boolean expression evaluates to true, then the if block of code will be executed, otherwise the elseif block of code will be executed, otherwise the else block of code will be executed. Block Commenting in tcl if 0 { Anything you write here will be treated as a comment and ignored } Different types of loops for Loop set N 100 ; for {set i 1 } { $i < $N } { incr i 1 } { puts \"The Value of i = $i\" ; } foreach Loop set Variable_Vector \"1 2 3 4 5 6 7 8 9\" ; foreach i $Variable_Vector { puts \"The Value of i = $i\" ; } while Loop set i 0 ; set N 100 ; while { $i < $N } { puts \"The Value of i = $i\" ; set i [expr ( $i + 1 )]; } or set i 0 ; set N 100 ; while { $i < $N } { puts \"The Value of i = $i\" ; incr i ; # incr is equivalent to (set i [expr ($i + 1)]) } Creating functions (or procedures) Tcl Procedures are similar to the functions in other programming languages. They basically avoid repeating the same code at multiple locations. Procedures are created using Proc command. A simple Procedure has the following syntax proc procedureName { arguments } { body of code return $var } Example - 1 , Definition of a simple proc to check puts command proc CheckPutsCommand {} { ; # No Input Arguments puts \"Hurray, Puts is working\" } CheckPutsCommand Upon exection, following output will be printed in the console ( Note , proc name is case-sensitive, both calling and defining names should be same) Hurray , Puts is working Example - 2 , Definition of a proc with Multiple but single valued arguments proc AddNumbers { a b } { ; # Input Arguments set sum [expr $a + $b ] return $sum ; } AddNumbers 10 30 Upon exection, following output will be printed in the console 40 Example - 3 , Definition of a proc with Multiple Variable arguments (each argument is a vector) proc CalculateMean { InputData } { ; # Input Arguments set Sum 0 ; foreach InputData_i $InputData { set Sum [expr $Sum + $InputData_i ] } set Mean [expr $Sum / [ llength $InputData ]]; # llength is inbuilt command, which returns the number of elements in the argument return $Mean ; } set Mean_1 [expr [ CalculateMean { 10 30 }] + [ CalculateMean { 10 30 40 50 60 }]]; set Mean_2 [expr [ CalculateMean { 30 {[ CalculateMean { 10 30 }]}}]]; # slightly difficult command *giving `proc` as an argument* puts \"Mean_1 = $Mean_1 \\t Mean_2 = $Mean_2\" Upon exection, following output will be printed in the console ( Note , Be careful while using braces, tcl is very bad at exception handling) Mean_1 = 58 Mean_2 = 25 Example - 4 , Definition of a proc with Default arguments proc Multiply_a_and_b { a { b 10 } } { ; # Input Arguments set Product [expr $a * $b ] return $Product ; } puts [ Multiply_a_and_b 10 20 ] puts [ Multiply_a_and_b 10 ] Upon exection, following output will be printed in the console ( Note , Be careful while using braces, tcl is very bad at exception handling) 200 100 NOTES - While calling the funtion, if the function is located elsewhere you have to call the file also using source C : \\ bladdh \\ adfadsff \\ filename . tcl before calling the function. (like we call the header files in c or c ++ languages). You can define any number of procs in a file.","title":"Tcl/Tk Language"},{"location":"opensees/Tcl_Tk/#tcltk-language","text":"","title":"Tcl/Tk Language"},{"location":"opensees/Tcl_Tk/#useful-codes","text":"","title":"Useful Codes"},{"location":"opensees/Tcl_Tk/#loading-file-and-saving-its-contents-in-a-variable","text":"File with single vector of values set filename \"Abc_123_Cde.out\" ; # Keep this file in the folder or if it is elsewhere provide location (set filename \"C:\\badfba\\asdf\\Abc_123_Cde.out\";) set File_ID [ open $filename r ]; #Load the File (Abc_123_Cde.out) and read the values i set Variable_1 [ read $File_ID ] close $File_ID Example , using the above varaible Variable_1 in a foreach loop foreach counter $Variable_1 { set Temp_Var $counter puts \"Print the value of Temp_Var = $Temp_Var\" } The use the vector Variable_1 like anyother vector in tcl File with Multiple vectors of values set filename \"Abc_123_Cde.out\" ; # Keep this file in the folder or if it is elsewhere provide location (set filename \"C:\\badfba\\asdf\\Abc_123_Cde.out\";) set File_ID [ open $filename r ]; #Load the File (Abc_123_Cde.out) and read the values i for {set i 1 } { $i < 100 } { incr i 1 } { # Say, 100 lines are there in the files with 5 Columns of equal Lengths gets $File_ID line scan $line \"%i %i %i %f %f\" Data_1 ( $i ) Data_2 ( $i ) Data_3 ( $i ) Data_4 ( $i ) Data_5 ( $i ) ; # Data_1,2,3,4 and 5 are vectors of equal length } That's it, we have loaded a file and stored its contents in different vectors. Now you can used the vectors like anyother vector in the program. foreach i $ Data_1 { puts \"Data_1($i) \\t Data_2($i) \\t Data_3($i) \\t Data_4($i) \\t Data_5($i)\" } Link , For more information on Tcl - File I/O,","title":"Loading file and saving its contents in a variable"},{"location":"opensees/Tcl_Tk/#useful-commandssyntaxes","text":"","title":"Useful Commands/Syntaxes"},{"location":"opensees/Tcl_Tk/#ifelse-if-else-syntax-in-tcl-language-is-for-more-info","text":"if { boolean_expression 1 } { # Executes when the boolean expression 1 is true } elseif { boolean_expression 2 } { # Executes when the boolean expression 2 is true } elseif { boolean_expression 3 } { # Executes when the boolean expression 3 is true } else { # executes when the none of the above condition is true } Example set Time_Step 0.005 ; set set ok [ analyze 1 $Time_Step ] if { $ok == 0 } { puts \"i = $i \\t Time_Step = $Time_Step -----------------------------\" } elseif { $ok < 0 } { puts \"i = $i \\t OK value = $ok -----------------------------\" } else { break; # It breaks a for loop } If the Boolean expression evaluates to true, then the if block of code will be executed, otherwise the elseif block of code will be executed, otherwise the else block of code will be executed.","title":"If...else if ... else, syntax in Tcl language is \u2212 (for more info)"},{"location":"opensees/Tcl_Tk/#block-commenting-in-tcl","text":"if 0 { Anything you write here will be treated as a comment and ignored }","title":"Block Commenting in tcl"},{"location":"opensees/Tcl_Tk/#different-types-of-loops","text":"for Loop set N 100 ; for {set i 1 } { $i < $N } { incr i 1 } { puts \"The Value of i = $i\" ; } foreach Loop set Variable_Vector \"1 2 3 4 5 6 7 8 9\" ; foreach i $Variable_Vector { puts \"The Value of i = $i\" ; } while Loop set i 0 ; set N 100 ; while { $i < $N } { puts \"The Value of i = $i\" ; set i [expr ( $i + 1 )]; } or set i 0 ; set N 100 ; while { $i < $N } { puts \"The Value of i = $i\" ; incr i ; # incr is equivalent to (set i [expr ($i + 1)]) }","title":"Different types of loops"},{"location":"opensees/Tcl_Tk/#creating-functions-or-procedures","text":"Tcl Procedures are similar to the functions in other programming languages. They basically avoid repeating the same code at multiple locations. Procedures are created using Proc command. A simple Procedure has the following syntax proc procedureName { arguments } { body of code return $var } Example - 1 , Definition of a simple proc to check puts command proc CheckPutsCommand {} { ; # No Input Arguments puts \"Hurray, Puts is working\" } CheckPutsCommand Upon exection, following output will be printed in the console ( Note , proc name is case-sensitive, both calling and defining names should be same) Hurray , Puts is working Example - 2 , Definition of a proc with Multiple but single valued arguments proc AddNumbers { a b } { ; # Input Arguments set sum [expr $a + $b ] return $sum ; } AddNumbers 10 30 Upon exection, following output will be printed in the console 40 Example - 3 , Definition of a proc with Multiple Variable arguments (each argument is a vector) proc CalculateMean { InputData } { ; # Input Arguments set Sum 0 ; foreach InputData_i $InputData { set Sum [expr $Sum + $InputData_i ] } set Mean [expr $Sum / [ llength $InputData ]]; # llength is inbuilt command, which returns the number of elements in the argument return $Mean ; } set Mean_1 [expr [ CalculateMean { 10 30 }] + [ CalculateMean { 10 30 40 50 60 }]]; set Mean_2 [expr [ CalculateMean { 30 {[ CalculateMean { 10 30 }]}}]]; # slightly difficult command *giving `proc` as an argument* puts \"Mean_1 = $Mean_1 \\t Mean_2 = $Mean_2\" Upon exection, following output will be printed in the console ( Note , Be careful while using braces, tcl is very bad at exception handling) Mean_1 = 58 Mean_2 = 25 Example - 4 , Definition of a proc with Default arguments proc Multiply_a_and_b { a { b 10 } } { ; # Input Arguments set Product [expr $a * $b ] return $Product ; } puts [ Multiply_a_and_b 10 20 ] puts [ Multiply_a_and_b 10 ] Upon exection, following output will be printed in the console ( Note , Be careful while using braces, tcl is very bad at exception handling) 200 100 NOTES - While calling the funtion, if the function is located elsewhere you have to call the file also using source C : \\ bladdh \\ adfadsff \\ filename . tcl before calling the function. (like we call the header files in c or c ++ languages). You can define any number of procs in a file.","title":"Creating functions (or procedures)"},{"location":"opensees/matlab_related/","text":"MATLAB Related... Frequently used Commands xlsread Data = xlsread ( 'File_Name.xlsx' , 'SheetName' , 'A2:B2124' ); Save variable (scalar or vector or matrix) in different file formats, ( for more info ) % Text File Format (.txt) Mat_A = rand ( 64 , 60 ); dlmwrite ( 'File_Name.txt' , Mat_A ); % Text File Format (.txt) A = rand ( 1 , 10 ); B = rand ( 10 ); save ( 'File_Name.txt' , 'A' , 'B' , '-ascii' ); % Save to File_Name.txt (ascii file format) type ( 'File_Name.txt' ); % Viewing the contents of the saved file % Matlab Variable Format (.mat) A = rand ( 20 , 30 ); B = rand ( 20 ); save ( 'FileName.mat' , 'A' , 'B' ) Useful Codes Generate a vector of Random Values ( No_of_Values ) between MinValue and MaxValue . function [ RandValue ] = RandomValueFunc ( MinValue, MaxValue, No_of_Values ) RandValue = MinValue + rand ( 1 , No_of_Values ) * ( MaxValue - MinValue ); end Loading a file having complex file name (such as Abs_12_bcd_23 . txt ). i = 12 ; j = 23 ; OutPut_dlmread = dlmread ([ 'Abs_' , num2str ( i ), '_bcd_' , num2str ( j ), '.txt' ]); % using dlmread command OutPut_Load = load ([ 'Abs_' , num2str ( i ), '_bcd_' , num2str ( j ), '.txt' ]); % using load command Different ways of running Opensees from MATLAB Normal command !OpenSees_Dim10000.exe \"run\".tcl Within a for loop for i = 1 : 1000 filename = [ 'Abs_' , num2str ( i ), '_File.tcl' ]; system ([ 'OpenSees_0db612a.exe<' , filename ]); end","title":"MATLAB"},{"location":"opensees/matlab_related/#matlab-related","text":"","title":"MATLAB Related..."},{"location":"opensees/matlab_related/#frequently-used-commands","text":"xlsread Data = xlsread ( 'File_Name.xlsx' , 'SheetName' , 'A2:B2124' ); Save variable (scalar or vector or matrix) in different file formats, ( for more info ) % Text File Format (.txt) Mat_A = rand ( 64 , 60 ); dlmwrite ( 'File_Name.txt' , Mat_A ); % Text File Format (.txt) A = rand ( 1 , 10 ); B = rand ( 10 ); save ( 'File_Name.txt' , 'A' , 'B' , '-ascii' ); % Save to File_Name.txt (ascii file format) type ( 'File_Name.txt' ); % Viewing the contents of the saved file % Matlab Variable Format (.mat) A = rand ( 20 , 30 ); B = rand ( 20 ); save ( 'FileName.mat' , 'A' , 'B' )","title":"Frequently used Commands"},{"location":"opensees/matlab_related/#useful-codes","text":"Generate a vector of Random Values ( No_of_Values ) between MinValue and MaxValue . function [ RandValue ] = RandomValueFunc ( MinValue, MaxValue, No_of_Values ) RandValue = MinValue + rand ( 1 , No_of_Values ) * ( MaxValue - MinValue ); end Loading a file having complex file name (such as Abs_12_bcd_23 . txt ). i = 12 ; j = 23 ; OutPut_dlmread = dlmread ([ 'Abs_' , num2str ( i ), '_bcd_' , num2str ( j ), '.txt' ]); % using dlmread command OutPut_Load = load ([ 'Abs_' , num2str ( i ), '_bcd_' , num2str ( j ), '.txt' ]); % using load command Different ways of running Opensees from MATLAB Normal command !OpenSees_Dim10000.exe \"run\".tcl Within a for loop for i = 1 : 1000 filename = [ 'Abs_' , num2str ( i ), '_File.tcl' ]; system ([ 'OpenSees_0db612a.exe<' , filename ]); end","title":"Useful Codes"},{"location":"opensees/OPS_User/OPS_Parallel/","text":"Introduction Seems like we can go for infinite sub-pages, its a good feature. It would be even more good, if we have drop down feature in the horrizontal header along with these infinite sub-pages.","title":"OpenSEES df"},{"location":"opensees/OPS_User/OPS_Parallel/#introduction","text":"Seems like we can go for infinite sub-pages, its a good feature. It would be even more good, if we have drop down feature in the horrizontal header along with these infinite sub-pages.","title":"Introduction"},{"location":"opensees/OPS_User/OPS_Seq/","text":"OPS_Seq","title":"OpenSEES Seq"},{"location":"opensees/OPS_User/OPS_Seq/#ops_seq","text":"","title":"OPS_Seq"}]}